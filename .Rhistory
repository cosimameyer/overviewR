# Generate necessary variables --------------------------------------------
# Inspired by:
# https://bit.ly/3fqhH7l
na_count <- sapply(dat, function(y)
sum(length(which(is.na(
y
)))))
# Generate necessary variables --------------------------------------------
# Inspired by:
# https://bit.ly/3fqhH7l
na_count <- vapply(dat, function(y)
sum(length(which(is.na(
y
)))))
? vapply
total <- sapply(dat, function(y) length(y))
total <- bapply(dat, function(y) length(y))
total <- vapply(dat, function(y) length(y))
# Generate necessary variables --------------------------------------------
# Inspired by:
# https://bit.ly/3fqhH7l
na_count <- vapply(dat, function(y)
sum(length(which(is.na(
y, numeric(1)
)))))
# Generate necessary variables --------------------------------------------
# Inspired by:
# https://bit.ly/3fqhH7l
na_count <- vapply(dat, function(y)
sum(length(which(is.na(
y
)))), FUN.VALUE =numeric(1))
total <- sapply(dat, function(y) length(y),FUN.VALUE =numeric(1))
total <- sapply(dat, function(y) length(y), FUN.VALUE =numeric(1))
total <- sapply(dat, function(y)
length(y), FUN.VALUE = numeric(1))
total <- vapply(dat, function(y)
length(y), FUN.VALUE = numeric(1))
overview_na <- function(dat,
yaxis = "Variables",
perc = TRUE) {
# Start with the data
dat <- dat
# Generate necessary variables --------------------------------------------
# Inspired by:
# https://bit.ly/3fqhH7l
na_count <- vapply(dat, function(y)
sum(length(which(is.na(
y
)))), FUN.VALUE =numeric(1))
total <- vapply(dat, function(y)
length(y), FUN.VALUE = numeric(1))
dat_frame <- data.frame(na_count, total)
# Add rownames as variable
dat_frame <- tibble::rownames_to_column(dat_frame, var = "variable")
# Get percentage
dat_frame <- dat_frame %>%
dplyr::mutate(percentage = na_count / (total / 100))
# Set theme ---------------------------------------------------------------
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Absolute numbers --------------------------------------------------------
if (perc == FALSE) {
plot_absolute <- ggplot2::ggplot(data = dat_frame) +
ggplot2::geom_col(ggplot2::aes(y = reorder(variable, -na_count),
x = na_count)) +
ggplot2::ylab(yaxis) +
ggplot2::xlab("Number of NA (total)") +
theme_plot
return(plot_absolute)
}
# Percentage --------------------------------------------------------------
if (perc == TRUE) {
plot_perc <- ggplot2::ggplot(data = dat_frame) +
ggplot2::geom_col(ggplot2::aes(y = reorder(variable, -percentage),
x = percentage)) +
ggplot2::ylab(yaxis) +
ggplot2::xlab("Number of NA (in %)") +
theme_plot
return(plot_perc)
}
}
overview_na(dat)
overview_na(dat, perc = FALSE)
overview_na(dat)
#' @param time Your time (e.g., time periods given by years, months, ...)
#' @param xaxis Label of your x axis ("Time frame" is default)
#' @param yaxis Label of your y axis ("Sample" is default)
#' @return A ggplot figure that presents your sample information visually
#' @examples
#' data(toydata)
#' overview_plot(dat = toydata, id = ccode, time = year)
#' @export
#' @importFrom dplyr "%>%"
#' @importFrom ggplot2 ggplot
overview_plot <-
function(dat,
id,
time,
xaxis = "Time frame",
yaxis = "Sample") {
# Start with the data
dat <- dat
id <- dplyr::enquo(id)
time <- dplyr::enquo(time)
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "grey90",
linetype = "dashed"),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Reduce data frame to distinct values and drop if observations with NA
# in the time variable
dat_red <- dat %>%
dplyr::distinct(!!id, !!time) %>%
dplyr::filter(!is.na(!!time)) %>%
dplyr::arrange(!!id, !!time)
# The following code is inspired by: https://bit.ly/2CpS3B7
dat_red <- dat_red
dat_red <- dat_red %>%
dplyr::mutate(idx = c(1, diff(!!time)))
i2 <- c(1, which(dat_red$idx != 1), nrow(dat_red) + 1)
dat_red$grp <- rep(seq_len(diff(i2)), diff(i2))
dat_red <- dat_red
# Plot it
plot <- dat_red %>%
dplyr::group_by(!!id) %>%
ggplot2::ggplot(ggplot2::aes(x = factor(!!time), y = !!id)) +
ggplot2::geom_line(size = 1.5, ggplot2::aes(group = grp)) +
ggplot2::geom_point(pch = 15, size = 2) +
ggplot2::ylab(yaxis) +
ggplot2::xlab(xaxis) +
theme_plot
return(plot)
}
overview_plot(dat, Location, year)
#' @param time Your time (e.g., time periods given by years, months, ...)
#' @param xaxis Label of your x axis ("Time frame" is default)
#' @param yaxis Label of your y axis ("Sample" is default)
#' @return A ggplot figure that presents your sample information visually
#' @examples
#' data(toydata)
#' overview_plot(dat = toydata, id = ccode, time = year)
#' @export
#' @importFrom dplyr "%>%"
#' @importFrom ggplot2 ggplot
overview_plot <-
function(dat,
id,
time,
xaxis = "Time frame",
yaxis = "Sample") {
# Start with the data
dat <- dat
id <- dplyr::enquo(id)
time <- dplyr::enquo(time)
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "grey90",
linetype = "dashed"),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Reduce data frame to distinct values and drop if observations with NA
# in the time variable
dat_red <- dat %>%
dplyr::distinct(!!id, !!time) %>%
dplyr::filter(!is.na(!!time)) %>%
dplyr::arrange(!!id, !!time)
# The following code is inspired by: https://bit.ly/2CpS3B7
dat_red <- dat_red
dat_red <- dat_red %>%
dplyr::mutate(idx = c(1, diff(!!time)))
i2 <- c(1, which(dat_red$idx != 1), nrow(dat_red) + 1)
dat_red$grp <- rep(1:length(diff(i2)), diff(i2))
dat_red <- dat_red
# Plot it
plot <- dat_red %>%
dplyr::group_by(!!id) %>%
ggplot2::ggplot(ggplot2::aes(x = factor(!!time), y = !!id)) +
ggplot2::geom_line(size = 1.5, ggplot2::aes(group = grp)) +
ggplot2::geom_point(pch = 15, size = 2) +
ggplot2::ylab(yaxis) +
ggplot2::xlab(xaxis) +
theme_plot
return(plot)
}
overview_plot(dat, Location, year)
#' @param time Your time (e.g., time periods given by years, months, ...)
#' @param xaxis Label of your x axis ("Time frame" is default)
#' @param yaxis Label of your y axis ("Sample" is default)
#' @return A ggplot figure that presents your sample information visually
#' @examples
#' data(toydata)
#' overview_plot(dat = toydata, id = ccode, time = year)
#' @export
#' @importFrom dplyr "%>%"
#' @importFrom ggplot2 ggplot
overview_plot <-
function(dat,
id,
time,
xaxis = "Time frame",
yaxis = "Sample") {
# Start with the data
dat <- dat
id <- dplyr::enquo(id)
time <- dplyr::enquo(time)
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "grey90",
linetype = "dashed"),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Reduce data frame to distinct values and drop if observations with NA
# in the time variable
dat_red <- dat %>%
dplyr::distinct(!!id, !!time) %>%
dplyr::filter(!is.na(!!time)) %>%
dplyr::arrange(!!id, !!time)
# The following code is inspired by: https://bit.ly/2CpS3B7
dat_red <- dat_red
dat_red <- dat_red %>%
dplyr::mutate(idx = c(1, diff(!!time)))
i2 <- c(1, which(dat_red$idx != 1), nrow(dat_red) + 1)
dat_red$grp <- rep(seq_len(diff(i2)), diff(i2))
dat_red <- dat_red
# Plot it
plot <- dat_red %>%
dplyr::group_by(!!id) %>%
ggplot2::ggplot(ggplot2::aes(x = factor(!!time), y = !!id)) +
ggplot2::geom_line(size = 1.5, ggplot2::aes(group = grp)) +
ggplot2::geom_point(pch = 15, size = 2) +
ggplot2::ylab(yaxis) +
ggplot2::xlab(xaxis) +
theme_plot
return(plot)
}
overview_plot(dat, Location, year)
#' @param time Your time (e.g., time periods given by years, months, ...)
#' @param xaxis Label of your x axis ("Time frame" is default)
#' @param yaxis Label of your y axis ("Sample" is default)
#' @return A ggplot figure that presents your sample information visually
#' @examples
#' data(toydata)
#' overview_plot(dat = toydata, id = ccode, time = year)
#' @export
#' @importFrom dplyr "%>%"
#' @importFrom ggplot2 ggplot
overview_plot <-
function(dat,
id,
time,
xaxis = "Time frame",
yaxis = "Sample") {
# Start with the data
dat <- dat
id <- dplyr::enquo(id)
time <- dplyr::enquo(time)
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "grey90",
linetype = "dashed"),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Reduce data frame to distinct values and drop if observations with NA
# in the time variable
dat_red <- dat %>%
dplyr::distinct(!!id, !!time) %>%
dplyr::filter(!is.na(!!time)) %>%
dplyr::arrange(!!id, !!time)
# The following code is inspired by: https://bit.ly/2CpS3B7
dat_red <- dat_red
dat_red <- dat_red %>%
dplyr::mutate(idx = c(1, diff(!!time)))
i2 <- c(1, which(dat_red$idx != 1), nrow(dat_red) + 1)
dat_red$grp <- rep(seq_len(nrow(diff(i2))), diff(i2))
dat_red <- dat_red
# Plot it
plot <- dat_red %>%
dplyr::group_by(!!id) %>%
ggplot2::ggplot(ggplot2::aes(x = factor(!!time), y = !!id)) +
ggplot2::geom_line(size = 1.5, ggplot2::aes(group = grp)) +
ggplot2::geom_point(pch = 15, size = 2) +
ggplot2::ylab(yaxis) +
ggplot2::xlab(xaxis) +
theme_plot
return(plot)
}
overview_plot(dat, Location, year)
overview_plot(dat, Location, year)
class(dat)
#' @param time Your time (e.g., time periods given by years, months, ...)
#' @param xaxis Label of your x axis ("Time frame" is default)
#' @param yaxis Label of your y axis ("Sample" is default)
#' @return A ggplot figure that presents your sample information visually
#' @examples
#' data(toydata)
#' overview_plot(dat = toydata, id = ccode, time = year)
#' @export
#' @importFrom dplyr "%>%"
#' @importFrom ggplot2 ggplot
overview_plot <-
function(dat,
id,
time,
xaxis = "Time frame",
yaxis = "Sample") {
# Start with the data
dat <- dat
id <- dplyr::enquo(id)
time <- dplyr::enquo(time)
# Create a theme for the plot
theme_plot <- ggplot2::theme(
# get rid of panel grids
axis.line = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "grey90",
linetype = "dashed"),
# Change plot and panel background
plot.background = ggplot2::element_rect(fill = "white"),
panel.background = ggplot2::element_rect(fill = "white"),
# Change legend
legend.direction = "horizontal",
legend.background = ggplot2::element_rect(fill = "black", color = NA),
legend.key = ggplot2::element_rect(color = "black", fill = "black"),
legend.title = ggplot2::element_blank(),
# Change text
plot.caption = ggplot2::element_text(size = 5),
axis.text = ggplot2::element_text(
face = "plain",
color = "black",
size = 8
),
text = ggplot2::element_text(
size = 10,
face = "plain"
)
)
# Reduce data frame to distinct values and drop if observations with NA
# in the time variable
dat_red <- dat %>%
dplyr::distinct(!!id, !!time) %>%
dplyr::filter(!is.na(!!time)) %>%
dplyr::arrange(!!id, !!time)
# The following code is inspired by: https://bit.ly/2CpS3B7
dat_red <- dat_red
dat_red <- dat_red %>%
dplyr::mutate(idx = c(1, diff(!!time)))
i2 <- c(1, which(dat_red$idx != 1), nrow(dat_red) + 1)
dat_red$grp <- rep(seq_len(length(diff(i2))), diff(i2))
dat_red <- dat_red
# Plot it
plot <- dat_red %>%
dplyr::group_by(!!id) %>%
ggplot2::ggplot(ggplot2::aes(x = factor(!!time), y = !!id)) +
ggplot2::geom_line(size = 1.5, ggplot2::aes(group = grp)) +
ggplot2::geom_point(pch = 15, size = 2) +
ggplot2::ylab(yaxis) +
ggplot2::xlab(xaxis) +
theme_plot
return(plot)
}
overview_plot(dat, Location, year)
goodpractice::gp()
inteRgrate::check_pkg()
inteRgrate::check_lintr()
inteRgrate::check_lintr()
inteRgrate::check_lintr()
inteRgrate::check_lintr()
inteRgrate::check_lintr()
knitr::opts_chunk$set(collapse = TRUE,
comment = "#>")
toydata_red <- toydata[-sample(1:seq_long(nrow(toydata)), 64), ]
toydata_red <- toydata[-sample(1:seq_len(nrow(toydata)), 64), ]
toydata_red <- toydata[-sample(seq_len(nrow(toydata)), 64), ]
toydata_red
overview_heat(toydata_red,
ccode,
year,
perc = TRUE,
exp_total = 12)
inteRgrate::check_lintr()
inteRgrate::check_lintr()
inteRgrate::check_r_filenames()
inteRgrate::check_gitignore()
devtools::check()
rm(list = c("overview_na", "overview_plot"))
devtools::check()
resultsnew <- rhub::check_for_cran()
devtools::check()
devtools::release()
